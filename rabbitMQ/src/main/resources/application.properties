
server.port=9090
#thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.enabled=true
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.mode=HTML5

#static
spring.web.resources.add-mappings=true
spring.web.resources.cache.period=3600
spring.web.resources.chain.cache=true
spring.web.resources.chain.enabled=true
spring.web.resources.chain.compressed=true
spring.resources.chain.html-application-cache=true
spring.web.resources.static-locations=classpath:/static/

#rabbitmq
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
# 是否启动时自动启动容器
spring.rabbitmq.listener.simple.auto-startup=true
# 表示消息确认方式 手动消息应答
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.direct.acknowledge-mode=auto
# 最小的消费者数量
spring.rabbitmq.listener.simple.concurrency=10
# 最大的消费者数量
spring.rabbitmq.listener.simple.max-concurrency=10
# 一个消费者最多可处理的nack消息数量，如果有事务的话，必须大于等于transaction数量.
# 工作模式中, 为了合理地分发数据, 需要将 qos 设置成 1, 每次只接收一条消息, 处理完成后才接收下一条消息.
spring.rabbitmq.listener.simple.prefetch=2
#决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge-mode有关系）
spring.rabbitmq.listener.simple.default-requeue-rejected=true
#监听重试是否可用
spring.rabbitmq.template.retry.enabled=true
# 第一次和第二次尝试传递消息的时间间隔
spring.rabbitmq.template.retry.initial-interval=1000
# 最大重试次数
spring.rabbitmq.template.retry.max-attempts=3
# 最大重试时间间隔
spring.rabbitmq.template.retry.max-interval=10000
# 应用于上一重试间隔的乘数
spring.rabbitmq.template.retry.multiplier=1.0
# 重试时有状态or无状态
spring.rabbitmq.listener.simple.retry.stateless=true

# 对 rabbitmqTemplate 进行监听,当消息由于server的原因无法到达queue时，就会被监听到，以便执行ReturnCallback方法
# 默认为false,Server端会自动删除不可达消息
spring.rabbitmq.template.mandatory=true

# 开启发送失败退回 是否启用【发布返回】，默认false
spring.rabbitmq.publisher-returns=true
#开启发送确认
#NONE值是禁用发布确认模式，是默认值
#CORRELATED值是发布消息成功到交换器后会触发回调方法
#SIMPLE值经测试有两种效果，其一效果和CORRELATED值一样会触发回调方法，其二在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker;
spring.rabbitmq.publisher-confirm-type=correlated

